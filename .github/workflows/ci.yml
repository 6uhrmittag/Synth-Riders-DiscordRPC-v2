name: CI - Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run smoke tests
      run: |
        python tests/run_smoke_tests.py
        
    - name: Run unit tests with coverage
      run: |
        pip install pytest pytest-cov
        python -m pytest tests/ --cov=. --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build-windows:
    name: Build Windows Executable
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
        
    - name: Build application
      shell: cmd
      run: |
        # Clean build directories
        if exist build rmdir /s /q build
        if exist dist rmdir /s /q dist
        
        # Build with PyInstaller
        pyinstaller --clean main.spec
        
        # Copy settings directory
        if exist settings (
          xcopy /E /I /Y settings dist\settings
        )
        
    - name: Verify build output
      shell: cmd
      run: |
        # Check if executable exists
        if not exist "dist\main.exe" (
          echo "Build failed: main.exe not found"
          exit 1
        )
        
        # Check if settings directory was copied
        if not exist "dist\settings" (
          echo "Build failed: settings directory not found"
          exit 1
        )
        
        # Display version information
        if exist "dist\settings\appinfo.ini" (
          echo "Application version:"
          findstr "AppVersion" dist\settings\appinfo.ini
        )
        
        echo "Build verification completed successfully"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable
        path: dist/
        retention-days: 30

  build-linux:
    name: Build Linux Executable
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
        
    - name: Build application
      run: |
        # Clean build directories
        rm -rf build dist
        
        # Build with PyInstaller
        pyinstaller --clean main.spec
        
        # Copy settings directory
        if [ -d "settings" ]; then
          cp -r settings dist/
        fi
        
    - name: Verify build output
      run: |
        # Check if executable exists
        if [ ! -f "dist/main" ]; then
          echo "Build failed: main executable not found"
          exit 1
        fi
        
        # Check if settings directory was copied
        if [ ! -d "dist/settings" ]; then
          echo "Build failed: settings directory not found"
          exit 1
        fi
        
        # Display version information
        if [ -f "dist/settings/appinfo.ini" ]; then
          echo "Application version:"
          grep "AppVersion" dist/settings/appinfo.ini
        fi
        
        echo "Build verification completed successfully"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-executable
        path: dist/
        retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build-windows, build-linux]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version
      id: get_version
      run: |
        VERSION=$(grep "AppVersion" settings/appinfo.ini | cut -d'=' -f2 | tr -d ' ')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: windows-executable
        path: windows-dist/
        
    - name: Download Linux artifact
      uses: actions/download-artifact@v4
      with:
        name: linux-executable
        path: linux-dist/
        
    - name: Build Windows Installer
      shell: cmd
      run: |
        REM Check if NSIS is available
        where makensis >nul 2>&1
        if %errorlevel% neq 0 (
          echo "NSIS not available, skipping installer build"
          exit 0
        )
        
        REM Get version
        for /f "tokens=2 delims==" %%i in ('findstr "AppVersion" settings/appinfo.ini') do set VERSION=%%i
        set VERSION=%VERSION: =%
        
        REM Build installer
        makensis /DAPP_VERSION=%VERSION% installer/setup.nsi
        
        REM Copy installer to release directory
        if exist "SynthRidersDiscordRPC-Setup-v%VERSION%.exe" (
          copy "SynthRidersDiscordRPC-Setup-v%VERSION%.exe" "windows-dist/"
        )
        
    - name: Create Windows Portable ZIP
      shell: cmd
      run: |
        REM Create portable ZIP for Windows
        powershell.exe -Command "Compress-Archive -Path 'windows-dist\*' -DestinationPath 'windows-executable.zip' -Force"
        
        REM Verify ZIP was created
        if exist "windows-executable.zip" (
          echo "Windows portable ZIP created successfully"
        ) else (
          echo "Failed to create Windows portable ZIP"
          exit 1
        )
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Release v${{ steps.get_version.outputs.version }}
        body: |
          ## Synth Riders Discord RPC v${{ steps.get_version.outputs.version }}
          
          ### Changes
          - Automated build and test pipeline
          - Cross-platform executable generation
          - Comprehensive smoke test coverage
          - Windows installer with setup wizard
          
          ### Downloads
          - **Windows Installer**: `SynthRidersDiscordRPC-Setup-v${{ steps.get_version.outputs.version }}.exe` (Recommended)
          - **Windows Portable**: `windows-executable.zip` (Extract and run)
          - **Linux**: `main` executable
          
          ### Installation
          
          #### Windows (Recommended)
          1. Download `SynthRidersDiscordRPC-Setup-v${{ steps.get_version.outputs.version }}.exe`
          2. Run the installer
          3. Follow the setup wizard
          4. The tool will start automatically and appear in your system tray
          
          #### Windows (Portable)
          1. Download `windows-executable.zip`
          2. Extract the ZIP file to a folder
          3. Run `main.exe`
          4. The tool will appear in your system tray
          
          #### Linux
          1. Download the `linux-dist` folder
          2. Extract to a folder
          3. Make executable: `chmod +x main`
          4. Run: `./main`
          
          ### Features
          - Real-time Synth Riders song status monitoring
          - Discord Rich Presence integration
          - Cover image display
          - Song metadata from SynthDB
          - System tray interface
          - Logging and SRT subtitle generation
          - Professional Windows installer
          - Automatic startup integration
        draft: false
        prerelease: false
        files: |
          windows-dist/
          linux-dist/
          windows-executable.zip
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 